apiVersion: batch/v1
kind: Job
metadata:
  name: config-update-job
  namespace: crm-system
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "-10"  # 确保最先运行
spec:
  backoffLimit: 3  # 允许最多重试3次
  ttlSecondsAfterFinished: 300
  template:
    spec:
      serviceAccountName: crm-config-updater
      containers:
      - name: config-updater
        image: bitnami/kubectl:latest
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -ec  # 添加e标志确保任何命令失败时脚本立即退出
        - |
          echo "Starting ConfigMap update job..."
          
          # 等待集群节点就绪
          echo "Waiting for nodes to be ready..."
          kubectl wait --for=condition=Ready node --all --timeout=60s || true
          
          # 获取节点的外部IP地址
          EXTERNAL_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')

          # 如果没有获取到ExternalIP，尝试使用InternalIP作为备用
          if [ -z "$EXTERNAL_IP" ]; then
            echo "No ExternalIP found, falling back to InternalIP"
            EXTERNAL_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          fi

          # 确保IP不为空
          if [ -z "$EXTERNAL_IP" ]; then
            echo "ERROR: Failed to get any IP address from nodes"
            exit 1
          fi

          echo "Detected IP: $EXTERNAL_IP"

          # 创建ConfigMap
          echo "Creating/updating ConfigMap..."
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: crm-config
            namespace: crm-system
            labels:
              app.kubernetes.io/instance: easycrm
          data:
            API_TIMEOUT: "30000"
            LOG_LEVEL: "info"
            MAX_UPLOAD_SIZE: "10485760"
            api-base-url: "http://${EXTERNAL_IP}:30888/api/"
            backend-url: "http://${EXTERNAL_IP}:30888/"
            file-base-url: "http://${EXTERNAL_IP}:30888/"
            allowed-origins: "http://localhost:3000,http://frontend:3000,http://${EXTERNAL_IP}:30080,http://${EXTERNAL_IP}"
          EOF

          # 验证ConfigMap是否已创建且包含所需数据
          echo "Verifying ConfigMap..."
          kubectl get configmap crm-config -n crm-system -o yaml
          
          if ! kubectl get configmap crm-config -n crm-system -o yaml | grep -q "allowed-origins"; then
            echo "ERROR: ConfigMap missing allowed-origins key"
            exit 1
          fi
          
          echo "ConfigMap updated successfully with External IP: $EXTERNAL_IP"
      restartPolicy: Never
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: crm-config-updater
  namespace: crm-system
---
# 使用集群角色以便在任何需要的命名空间创建资源
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: config-updater-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "nodes"]
  verbs: ["get", "list", "create", "update", "patch", "delete", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "patch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: config-updater-binding
subjects:
- kind: ServiceAccount
  name: crm-config-updater
  namespace: crm-system
roleRef:
  kind: ClusterRole
  name: config-updater-role
  apiGroup: rbac.authorization.k8s.io 