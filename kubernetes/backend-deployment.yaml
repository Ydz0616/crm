apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  labels:
    app: crm-backend
    app.kubernetes.io/instance: easycrm
    app.kubernetes.io/part-of: crm
    app.kubernetes.io/component: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crm-backend
  template:
    metadata:
      labels:
        app: crm-backend
        app.kubernetes.io/instance: easycrm
        app.kubernetes.io/part-of: crm
        app.kubernetes.io/component: backend
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - crm-backend
              topologyKey: kubernetes.io/hostname
      volumes:
      - name: uploads-volume
        emptyDir: {}
      initContainers:
      - name: setup-logo
        image: busybox
        command: ["/bin/sh", "-c"]
        args:
        - |
          # 探索实际的文件结构
          echo "探索容器文件结构:"
          ls -la /usr/src/app/
          
          # 创建正确的目录路径
          mkdir -p /usr/src/app/backend/src/public/uploads/setting
          mkdir -p /usr/src/app/src/public/uploads/setting
          
          echo "在容器启动时检查目录"
          ls -la /usr/src/app/backend/src/public/uploads/setting
          
          # 创建默认logo文件，如果不存在
          if [ ! -f /usr/src/app/backend/src/public/uploads/setting/company-logo.png ]; then
            echo "创建默认logo文件在backend目录"
            # 使用base64编码的1x1透明像素
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > /usr/src/app/backend/src/public/uploads/setting/company-logo.png
            chmod 644 /usr/src/app/backend/src/public/uploads/setting/company-logo.png
          fi
          
          # 同时在另一个可能的路径也创建
          if [ ! -f /usr/src/app/src/public/uploads/setting/company-logo.png ]; then
            echo "创建默认logo文件在src目录"
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > /usr/src/app/src/public/uploads/setting/company-logo.png
            chmod 644 /usr/src/app/src/public/uploads/setting/company-logo.png
          fi
          
          echo "创建完成，再次检查目录:"
          ls -la /usr/src/app/backend/src/public/uploads/setting
          ls -la /usr/src/app/src/public/uploads/setting
        volumeMounts:
        - name: uploads-volume
          mountPath: /usr/src/app/src/public/uploads
        - name: uploads-volume
          mountPath: /usr/src/app/backend/src/public/uploads
      containers:
      - name: crm-backend
        image: yz743/easycrm:backend-v1.1.2c
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        volumeMounts:
        - name: uploads-volume
          mountPath: /usr/src/app/src/public/uploads
        envFrom:
        - configMapRef:
            name: backend-config
        env:
        - name: DATABASE
          valueFrom:
            secretKeyRef:
              name: crm-secrets
              key: mongodb-uri
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: crm-secrets
              key: jwt-secret
        - name: GOTENBERG_URL
          value: "http://crm-gotenberg.crm-system.svc.cluster.local:3000"
        - name: FORCE_USE_REMOTE_LOGO
          value: "false"
        - name: DEFAULT_LOGO_PATH
          value: "/usr/src/app/backend/src/public/uploads/setting/company-logo.png"
        - name: LOGO_URL_PREFIX
          value: ""
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  labels:
    app.kubernetes.io/instance: easycrm
    app.kubernetes.io/part-of: crm
    app.kubernetes.io/component: backend
spec:
  selector:
    app: crm-backend
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
    nodePort: 30888
  type: NodePort
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  labels:
    app.kubernetes.io/instance: easycrm
    app.kubernetes.io/part-of: crm
    app.kubernetes.io/component: backend
data:
  PORT: "3000"
  NODE_ENV: "production"
  OPENSSL_CONF: "/dev/null"
  NODE_TLS_REJECT_UNAUTHORIZED: "0"
  BYPASS_AUTH: "true"
  MONGODB_CONNECT_TIMEOUT: "30000"
  MONGODB_SOCKET_TIMEOUT: "30000"
  MONGODB_SERVER_SELECTION_TIMEOUT: "30000"
  MONGODB_RETRY_WRITES: "true"
  MONGODB_RETRY_READS: "true"
  MONGODB_MAX_POOL_SIZE: "10"
  MONGODB_MIN_POOL_SIZE: "5"
  PUBLIC_SERVER_FILE: "/"
  SERVER_HOST: "http://47.76.240.140:30888"
  ALLOWED_ORIGINS: "http://47.76.240.140:30080,http://localhost:3000,http://frontend:3000" 